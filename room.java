
package hcms;



import hcms.Signup.UserSession;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class roomf extends javax.swing.JFrame {

   
    public roomf() {
        initComponents();
        
    }

    /**
   
}
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rmain = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        standardroom = new javax.swing.JComboBox<>();
        luxry = new javax.swing.JComboBox<>();
        famly = new javax.swing.JComboBox<>();
        access = new javax.swing.JComboBox<>();
        villa = new javax.swing.JComboBox<>();
        sprof = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        selectedRoom = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        availableRooms = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        roomrate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        roomNofNights = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        roomchin = new javax.swing.JTextField();
        roomchout = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        roomNofadlt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        roomNofChld = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        roomNofvch = new javax.swing.JTextField();
        cnclrmbkng = new javax.swing.JButton();
        roombacktohome = new javax.swing.JButton();
        roomconfbook = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        roomtoorder = new javax.swing.JButton();
        roomprkng = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Room Service");

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ZAFL HOTEL");

        jLabel2.setFont(new java.awt.Font("Segoe Script", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Room service");

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(380, 380, 380))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe Print", 2, 12)); // NOI18N
        jLabel4.setText("wel come ,Enjoy luxurious and comfortable hotel stays through our professional booking service");

        rmain.setBackground(new java.awt.Color(0, 102, 102));
        rmain.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        rmain.setForeground(new java.awt.Color(255, 255, 255));
        rmain.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Standard Rooms", " Luxury and Upscale Rooms", "Family-Friendly Rooms", "Accessible Rooms", " Luxury Villas or Private Residences", "Specialty and Unique Rooms" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        rmain.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        rmain.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rmain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rmainKeyPressed(evt);
            }
        });
        rmain.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                rmainValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(rmain);

        jLabel5.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel5.setText("Rooms");

        standardroom.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        standardroom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single Room: For solo guests with a single bed.", "Double Room: For couples with a double bed.", "Twin Room: For two guests with two single beds.", "King Room: A luxurious king-size bed for couples." }));
        standardroom.setInheritsPopupMenu(true);
        standardroom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                standardroomItemStateChanged(evt);
            }
        });

        luxry.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        luxry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deluxe Room: Upgraded amenities and comfort for a luxurious stay.", "Club Room: Exclusive access to the hotel's club lounge and premium services.", "Suite: A spacious room with a separate living area and luxurious amenities.", "Presidential Suite: The most luxurious suite with a private dining area and personal butler service.", "Penthouse Suite: A luxurious suite with stunning views from the highest floor", "VIP Suite: A high-end suite with personalized service and exclusive amenities" }));
        luxry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                luxryItemStateChanged(evt);
            }
        });
        luxry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                luxryActionPerformed(evt);
            }
        });

        famly.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        famly.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Family Room: Accommodates more than two adults and one or two children", "Connecting Rooms: Allows families to stay in two adjacent rooms.", "Family Suite: A spacious area perfect for families with separate amenities", "Kid's Room: Designed for families with young children, offering child-friendly amenities." }));
        famly.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                famlyItemStateChanged(evt);
            }
        });

        access.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        access.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accessibility Suite: For guests with mobility impairments, with accessibility features.", "Wheelchair-Accessible Room: Wide doorways and roll-in shower for guests using a wheelchair.", "lights for guests with hearing impairments", "Visually-Impaired Room: Audio signals for guests with visual impairments." }));
        access.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                accessItemStateChanged(evt);
            }
        });

        villa.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        villa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Luxury Villa: An upscale villa with spacious living areas and private amenities.", "Private Residence or Penthouse Villa: The ultimate luxury experience with personalized services.", " ", " " }));
        villa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                villaItemStateChanged(evt);
            }
        });

        sprof.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        sprof.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Soundproof Room: Designed for musicians or those requiring complete quiet.", "Silent Room: Features sound-absorbing materials and technology for a silent environment", "Meditation or Mindfulness Room: A calming space for relaxation and mindfulness." }));
        sprof.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sprofItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel6.setText("Selected Room");

        selectedRoom.setEditable(false);
        selectedRoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedRoomFocusGained(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel7.setText("Available Rooms");

        availableRooms.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel8.setText("Room Rate");

        roomrate.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel9.setText("Number of Nignts");

        roomNofNights.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roomNofNightsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomNofNightsFocusLost(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel10.setText("Check-in Date");

        roomchin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomchinFocusLost(evt);
            }
        });

        roomchout.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomchoutFocusLost(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel11.setText("Check-out Date");

        jLabel12.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel12.setText("Number of Adults");

        roomNofadlt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomNofadltFocusLost(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel13.setText("Number of Children");

        roomNofChld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomNofChldFocusLost(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel15.setText("Additional Information");

        jLabel17.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel17.setText("Number of viecle");

        roomNofvch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomNofvchFocusLost(evt);
            }
        });

        cnclrmbkng.setBackground(new java.awt.Color(0, 102, 102));
        cnclrmbkng.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        cnclrmbkng.setForeground(new java.awt.Color(255, 255, 255));
        cnclrmbkng.setText("cancel booking");
        cnclrmbkng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnclrmbkngActionPerformed(evt);
            }
        });

        roombacktohome.setBackground(new java.awt.Color(0, 102, 102));
        roombacktohome.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        roombacktohome.setForeground(new java.awt.Color(255, 255, 255));
        roombacktohome.setText("back to home");
        roombacktohome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roombacktohomeActionPerformed(evt);
            }
        });

        roomconfbook.setBackground(new java.awt.Color(0, 102, 102));
        roomconfbook.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        roomconfbook.setForeground(new java.awt.Color(255, 255, 255));
        roomconfbook.setText("confirm booking");
        roomconfbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomconfbookActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        jLabel14.setText("booking");

        roomtoorder.setBackground(new java.awt.Color(0, 102, 102));
        roomtoorder.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        roomtoorder.setForeground(new java.awt.Color(255, 255, 255));
        roomtoorder.setText("Order Room service");
        roomtoorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomtoorderActionPerformed(evt);
            }
        });

        roomprkng.setFont(new java.awt.Font("Segoe Print", 0, 12)); // NOI18N
        roomprkng.setText("parking requirements");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(473, 473, 473))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(roomconfbook)
                        .addGap(14, 14, 14)
                        .addComponent(cnclrmbkng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roombacktohome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomtoorder, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(roomprkng, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomNofvch, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(roomNofadlt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(roomNofChld, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(roomrate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jLabel9)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(roomNofNights, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel10))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(roomchin, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(roomchout, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(selectedRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(2, 2, 2)))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availableRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(luxry, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(sprof, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(villa, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(access, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(famly, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(standardroom, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(71, 71, 71))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {access, famly, luxry, sprof, standardroom, villa});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {roomchin, roomchout});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(standardroom, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(luxry, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(famly, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(access, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(villa, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sprof, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cnclrmbkng)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(roombacktohome)
                        .addComponent(roomconfbook)
                        .addComponent(roomtoorder)))
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(roomrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)
                                    .addComponent(roomNofNights, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(roomNofadlt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(roomNofChld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(availableRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectedRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(roomchin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(roomchout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(roomNofvch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomprkng))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void rmainKeyPressed(java.awt.event.KeyEvent evt) {                                 
        // TODO add your handling code here:
    }                                

    private void luxryActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     
private boolean isMessageDisplayed = false;
    private void rmainValueChanged(javax.swing.event.ListSelectionEvent evt) {                                   
        
    if (!evt.getValueIsAdjusting()) {
       
        int selectedIndex = rmain.getSelectedIndex();
        
        
        
        if (selectedIndex == 0) {
          
            standardroom.setVisible(true); 
            standardroom.requestFocus();
            standardroom.showPopup(); 
        

        }
        if (selectedIndex == 1) {
           
        
            luxry.setVisible(true); 
            luxry.requestFocus(); 
            
            luxry.showPopup(); 
            
        }
        if (selectedIndex == 2) {
           
            famly.setVisible(true); 
            
            famly.requestFocus();
            
            famly.showPopup(); 
            
   
            
        }
        if (selectedIndex == 3) {
            
            
        
            access.setVisible(true);
            
            access.requestFocus(); 
            
            access.showPopup(); 
            
            
        }
        if (selectedIndex == 4) {
            
            
        
            villa.setVisible(true);
            
            villa.requestFocus(); 
            
            villa.showPopup(); 
            
            
        }
        if (selectedIndex == 5) {
            
            
            sprof.setVisible(true); 
            
            sprof.requestFocus(); 
            
            sprof.showPopup();
            
        }
    }
    }                                  

    private void selectedRoomFocusGained(java.awt.event.FocusEvent evt) {                                         
        // TODO add your handling code here:
    }                                        
private int availableRoomsNo = 5; 
    private void standardroomItemStateChanged(java.awt.event.ItemEvent evt) {                                              
        // TODO add your handling code here:
         
        
    String selectedItem = (String) standardroom.getSelectedItem();

   
    
    if (selectedRoom.getText().isEmpty()) {

        
        selectedRoom.setText(selectedItem);
         if (availableRoomsNo > 0) {
            
String selectedName = selectedRoom.getText();
                double roomPrice ;
       
                
        switch (selectedName) {
            case "Single Room: For solo guests with a single bed.":
                roomPrice = 150.00;
             
                
                break;
            case "Double Room: For couples with a double bed.":
                roomPrice = 250.00; 
               
                        
                    
                break;
            case "Twin Room: For two guests with two single beds.":
                roomPrice = 300.00; 
                
                break;
            case "King Room: A luxurious king-size bed for couples.":
                roomPrice = 400.00;
                
                break;
            default:
                roomPrice = 0.0; 
                
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
          
           
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
           
             
            availableRooms.setText("No available rooms left.");}
    }
    }                                             

    private void luxryItemStateChanged(java.awt.event.ItemEvent evt) {                                       
        // TODO add your handling code here:
           
        
    String selectedItem = (String) luxry.getSelectedItem();

   
    
    if (selectedRoom.getText().isEmpty()) {
       
        
        selectedRoom.setText(selectedItem);
          if (availableRoomsNo > 0) {
            String selectedName = selectedRoom.getText();
                double roomPrice ;
        
                
        switch (selectedName) {
            case "Deluxe Room: Upgraded amenities and comfort for a luxurious stay.":
                roomPrice = 275.00;
             
                
                break;
            case "Club Room: Exclusive access to the hotel's club lounge and premium services.":
                roomPrice = 250.00;
                
                break;
            case "Suite: A spacious room with a separate living area and luxurious amenities.":
                roomPrice = 300.00;
                
                break;
            case "Presidential Suite: The most luxurious suite with a private dining area and personal butler service.":
                roomPrice = 400.00; 
                
                break;
case "Penthouse Suite: A luxurious suite with stunning views from the highest floor":
                roomPrice = 450.00;
                
                break;
case "VIP Suite: A high-end suite with personalized service and exclusive amenities":
                roomPrice = 500.00; 
                
                break;
            default:
                roomPrice = 0.0; 
                
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
            
           
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
         
              
            availableRooms.setText("No available rooms left.");}
    }
    }                                      

    private void famlyItemStateChanged(java.awt.event.ItemEvent evt) {                                       
        // TODO add your handling code here:
           
        
    String selectedItem = (String) famly.getSelectedItem();


    
    if (selectedRoom.getText().isEmpty()) {
       
        
        selectedRoom.setText(selectedItem);
          if (availableRoomsNo > 0) {
            String selectedName = selectedRoom.getText();
                double roomPrice ;

                
        switch (selectedName) {
            case "Family Room: Accommodates more than two adults and one or two children":
                roomPrice = 150.00;
             
                
                break;
            case "Connecting Rooms: Allows families to stay in two adjacent rooms.":
                roomPrice = 250.00; 
                
                break;
            case "Family Suite: A spacious area perfect for families with separate amenities":
                roomPrice = 300.00; 
                
                break;
            case "Kid's Room: Designed for families with young children, offering child-friendly amenities.":
                roomPrice = 100.00;
                
                break;
            default:
                roomPrice = 0.0; 
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
           
           
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
          
              
            availableRooms.setText("No available rooms left.");}
    }
    }                                      

    private void accessItemStateChanged(java.awt.event.ItemEvent evt) {                                        
        // TODO add your handling code here:
          
        
    String selectedItem = (String) access.getSelectedItem();

 
    
    if (selectedRoom.getText().isEmpty()) {
      
        
        selectedRoom.setText(selectedItem);
          if (availableRoomsNo > 0) {
            String selectedName = selectedRoom.getText();
                double roomPrice ;
        
                
        switch (selectedName) {
            case "Accessibility Suite: For guests with mobility impairments, with accessibility features.":
                roomPrice = 200.00;
           
                
                break;
            case "Wheelchair-Accessible Room: Wide doorways and roll-in shower for guests using a wheelchair.":
                roomPrice = 180.00; 
                
                break;
            case "lights for guests with hearing impairments":
                roomPrice = 210.00; 
                
                break;
            case "Visually-Impaired Room: Audio signals for guests with visual impairments.":
                roomPrice = 200.00; 
                
                break;
            default:
                roomPrice = 0.0; 
                
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
           
           
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
            
              
            availableRooms.setText("No available rooms left.");}
    }
    }                                       

    private void villaItemStateChanged(java.awt.event.ItemEvent evt) {                                       
        // TODO add your handling code here:
       
        
    String selectedItem = (String) villa.getSelectedItem();

    
    
    if (selectedRoom.getText().isEmpty()) {
       
        
        selectedRoom.setText(selectedItem);
          if (availableRoomsNo > 0) {
            String selectedName = selectedRoom.getText();
                double roomPrice ;
      
                
        switch (selectedName) {
            case "Luxury Villa: An upscale villa with spacious living areas and private amenities.":
                roomPrice = 700.00;
            
                break;
            case "Private Residence or Penthouse Villa: The ultimate luxury experience with personalized services.":
                roomPrice = 780.00; 
                break;
                     default:
                roomPrice = 0.0; 
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
           
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
         
            availableRooms.setText("No available rooms left.");}
    }
    }                                      

    private void sprofItemStateChanged(java.awt.event.ItemEvent evt) {                                       
        // TODO add your handling code here:
           
        
    String selectedItem = (String) sprof.getSelectedItem();

   
    
    if (selectedRoom.getText().isEmpty()) {
       
        selectedRoom.setText(selectedItem);
          if (availableRoomsNo > 0) {
            String selectedName = selectedRoom.getText();
                double roomPrice ;
        switch (selectedName) {
            case "Soundproof Room: Designed for musicians or those requiring complete quiet.":
                roomPrice = 300.00;
               
                break;
            case "Silent Room: Features sound-absorbing materials and technology for a silent environment":
                roomPrice = 380.00; 
                break;

            case "Meditation or Mindfulness Room: A calming space for relaxation and mindfulness.":
                roomPrice = 310.00; 
                break;
                     default:
                roomPrice = 0.0; 
                break;
        }
         
           roomrate.setText(String.format("%.2f", roomPrice));
          
            availableRooms.setText(String.valueOf(availableRoomsNo));
        } else {
           
            availableRooms.setText("No available rooms left.");}
    }
    }                                      

    private void roomNofNightsFocusGained(java.awt.event.FocusEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void roomNofNightsFocusLost(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:
          String suphn = roomNofNights.getText().trim();
        if(!suphn.matches( "\\d[1-9]")){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
            isMessageDisplayed = false;}
        roomNofNights.requestFocus();
        return;
        }
        if(suphn.isEmpty()){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Please enter a number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
        roomNofNights.requestFocus();
        
        }
        
    }                                       

    private void roomNofChldFocusLost(java.awt.event.FocusEvent evt) {                                      
        // TODO add your handling code here:
                  String suphn = roomNofChld.getText().trim();
        if(!suphn.matches( "\\d[1-9]")){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
            isMessageDisplayed = false;}
        roomNofChld.requestFocus();
        return;
        }
        if(suphn.isEmpty()){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Please enter a number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
       roomNofChld.requestFocus();
        
        }
    }                                     

    private void roomNofadltFocusLost(java.awt.event.FocusEvent evt) {                                      
        // TODO add your handling code here:
                        String suphn = roomNofadlt.getText().trim();
        if(!suphn.matches( "\\d[1-9]")){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
            isMessageDisplayed = false;}
        roomNofadlt.requestFocus();
        return;
        }
        if(suphn.isEmpty()){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Please enter a number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
       roomNofadlt.requestFocus();
        
        }
    }                                     

    private void roomNofvchFocusLost(java.awt.event.FocusEvent evt) {                                     
        // TODO add your handling code here:
                              String suphn = roomNofvch.getText().trim();
        if(!suphn.matches( "\\d[1-9]")){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
            isMessageDisplayed = false;}
        roomNofvch.requestFocus();
        return;
        }
        if(suphn.isEmpty()){
              if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Please enter a number.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
      roomNofvch.requestFocus();
        
        }
        roomprkng.setSelected(true);
    }                                    

    private void roomchinFocusLost(java.awt.event.FocusEvent evt) {                                   
        // TODO add your handling code here:

    final String DATE_FORMAT = "yyyy-MM-dd";
    
   
    if (roomchin.getText().isEmpty()) {
        if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Enter checkin date.", "empty field", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
      roomchin.requestFocus();
        
   
        return;
    }

    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
    sdf.setLenient(false);

    try {
        
        Date date = sdf.parse(roomchin.getText());

   
        if (date.before(new Date())) {
           
               if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(roomchin, "Date cannot be in the past.");
            roomchin.requestFocus();
               isMessageDisplayed=false;
               }
            return;
        }
        
    } catch (ParseException ex) {
      
           if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
        JOptionPane.showMessageDialog(roomchin, "Invalid date format. Please use " + DATE_FORMAT + ".");
        roomchin.requestFocus();
            isMessageDisplayed=false;
               }
    }

    }                                  

    private void roomchoutFocusLost(java.awt.event.FocusEvent evt) {                                    
        // TODO add your handling code here:
          
   
    final String DATE_FORMAT = "yyyy-MM-dd";
    
    
    if (roomchout.getText().isEmpty()) {
        if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
              JOptionPane.showMessageDialog(this, "Enter checkin date.", "empty field", JOptionPane.ERROR_MESSAGE);
              isMessageDisplayed = false;}
      roomchout.requestFocus();
        
      
        return;
    }

    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
    sdf.setLenient(false); 

    try {
       
        Date date = sdf.parse(roomchout.getText());

       
        if (date.before(new Date())) {
            
               if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
            JOptionPane.showMessageDialog(roomchout, "Date cannot be in the past.");
            roomchout.requestFocus();
               isMessageDisplayed=false;
               }
            return;
        }
        
    } catch (ParseException ex) {
   
           if(!isMessageDisplayed){ 
               isMessageDisplayed=true;
        JOptionPane.showMessageDialog(roomchout, "Invalid date format. Please use " + DATE_FORMAT + ".");
        roomchout.requestFocus();
            isMessageDisplayed=false;
               }
    }

    
    }                                   
public class UserRoomSession {
    private final String userEmail;
    private final String selectedRoom;
    private final String availableRooms;
    private final String roomRate;
    private final String numberOfNights;
    private final String checkInDate;
    private final String checkOutDate;
    private final String numberOfAdults;
    private final String numberOfChildren;
    private final String numberOfVehicles;
    private final boolean parkingRequired;

    public UserRoomSession(String userEmail, String selectedRoom, String availableRooms, String roomRate, 
                           String numberOfNights, String checkInDate, String checkOutDate, 
                           String numberOfAdults, String numberOfChildren, String numberOfVehicles, 
                           boolean parkingRequired) {
        this.userEmail = userEmail;
        this.selectedRoom = selectedRoom;
        this.availableRooms = availableRooms;
        this.roomRate = roomRate;
        this.numberOfNights = numberOfNights;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
        this.numberOfAdults = numberOfAdults;
        this.numberOfChildren = numberOfChildren;
        this.numberOfVehicles = numberOfVehicles;
        this.parkingRequired = parkingRequired;
    }

    public String getUserEmail() {
        return userEmail;
    }

    public String getSelectedRoom() {
        return selectedRoom;
    }

    public String getAvailableRooms() {
        return availableRooms;
    }

    public String getRoomRate() {
        return roomRate;
    }

    public String getNumberOfNights() {
        return numberOfNights;
    }

    public String getCheckInDate() {
        return checkInDate;
    }

    public String getCheckOutDate() {
        return checkOutDate;
    }

    public String getNumberOfAdults() {
        return numberOfAdults;
    }

    public String getNumberOfChildren() {
        return numberOfChildren;
    }

    public String getNumberOfVehicles() {
        return numberOfVehicles;
    }

    public boolean isParkingRequired() {
        return parkingRequired;
    }
}

    private UserRoomSession userRoomSession;
    private void roomconfbookActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:

  
    String selectedRoomValue = selectedRoom.getText();
    String availableRoomsValue = availableRooms.getText();
    String roomRateValue = roomrate.getText();
    String numberOfNightsValue = roomNofNights.getText();
    String checkInValue = roomchin.getText();
    String checkOutValue = roomchout.getText();
    String numberOfAdultsValue = roomNofadlt.getText();
    String numberOfChildrenValue = roomNofChld.getText();
    String numberOfVehiclesValue = roomNofvch.getText();
    boolean parkingRequirementsValue = roomprkng.isSelected();
    
    if (availableRoomsNo > 0) {
        availableRoomsNo--; 
        availableRooms.setText(String.valueOf(availableRoomsNo)); 
    } else {
        if (!isMessageDisplayed) {
            isMessageDisplayed = true;
            JOptionPane.showMessageDialog(this, "No available rooms to book.");
            isMessageDisplayed = false;
        }
        return; 
    }
    
   
    UserSession userSession = UserSession.getInstance();
    String currentUserEmail = userSession.getEmail(); 
    
       userRoomSession = new UserRoomSession(
            currentUserEmail,
            selectedRoomValue,
            availableRoomsValue,
            roomRateValue,
            numberOfNightsValue,
            checkInValue,
            checkOutValue,
            numberOfAdultsValue,
            numberOfChildrenValue,
            numberOfVehiclesValue,
            parkingRequirementsValue
    );

    try (BufferedWriter writer = new BufferedWriter(new FileWriter("info.txt", true))) {
      
        writer.write("User: " + currentUserEmail + "\n");
        writer.write("--------------------------------------------------\n");
        writer.write(String.format("%-25s %-25s\n", "Selected Room:", userRoomSession.getSelectedRoom()));
        writer.write(String.format("%-25s %-25s\n", "Available Rooms:", userRoomSession.getAvailableRooms()));
        writer.write(String.format("%-25s %-25s\n", "Room Rate:", userRoomSession.getRoomRate()));
        writer.write(String.format("%-25s %-25s\n", "Number of Nights:", userRoomSession.getNumberOfNights()));
        writer.write(String.format("%-25s %-25s\n", "Check-in Date:", userRoomSession.getCheckInDate()));
        writer.write(String.format("%-25s %-25s\n", "Check-out Date:", userRoomSession.getCheckOutDate()));
        writer.write(String.format("%-25s %-25s\n", "Number of Adults:", userRoomSession.getNumberOfAdults()));
        writer.write(String.format("%-25s %-25s\n", "Number of Children:", userRoomSession.getNumberOfChildren()));
        writer.write(String.format("%-25s %-25s\n", "Number of Vehicles:", userRoomSession.getNumberOfVehicles()));
        writer.write(String.format("%-25s %-25s\n", "Parking Required:", userRoomSession.isParkingRequired()));
        writer.write("--------------------------------------------------\n\n");
        
    } catch (IOException e) {
        if (!isMessageDisplayed) {
            isMessageDisplayed = true;
            JOptionPane.showMessageDialog(this, "Error saving booking information: " + e.getMessage());
            isMessageDisplayed = false;
        }
    }

   
    if (!isMessageDisplayed) {
        isMessageDisplayed = true;
        JOptionPane.showMessageDialog(this, "Booking information saved successfully for " + currentUserEmail);
        isMessageDisplayed = false;
    }

    }                                            

    private void cnclrmbkngActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        
    
    if (userRoomSession != null) {
      
        String restoredRoom = userRoomSession.getSelectedRoom();
        
        if (restoredRoom != null) {
           
            addRoomBackToAvailableRooms(restoredRoom);
        }
        
       
        clearUserRoomSessionInfo();

       
        notifyUserBookingCancelled();
        
    } else {
          if (!isMessageDisplayed) {
        isMessageDisplayed = true;
        JOptionPane.showMessageDialog(this, "no booking to cancel");
        isMessageDisplayed = false;
    }
    }
    }                                          

    private void roombacktohomeActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
           Homee HomeeFrame = new Homee();
    HomeeFrame.setVisible(true);
    HomeeFrame.pack();
    HomeeFrame.setLocationRelativeTo(null); 
    this.dispose();

    }                                              

    private void roomtoorderActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
                Order OrderFrame = new Order();
    OrderFrame.setVisible(true);
    OrderFrame.pack();
    OrderFrame.setLocationRelativeTo(null); 
    this.dispose();
    }                                           
    

private void clearUserRoomSessionInfo() {
   
    userRoomSession = new UserRoomSession(
        userRoomSession.getUserEmail(),
        null, // Clear the selected room
        null, // Clear the available rooms
        null, // Clear the room rate
        null, // Clear the number of nights
        null, // Clear the check-in date
        null, // Clear the check-out date
        null, // Clear the number of adults
        null, // Clear the number of children
        null, // Clear the number of vehicles
        false // Reset parking requirement
    );
}

private void addRoomBackToAvailableRooms(String restoredRoom) {
  
    
    availableRoomsNo++; 
    availableRooms.setText(String.valueOf(availableRoomsNo)); 
}

private void notifyUserBookingCancelled() {
       if (!isMessageDisplayed) {
        isMessageDisplayed = true;
        JOptionPane.showMessageDialog(this, "Booking has been successfully cancelled");
        isMessageDisplayed = false;
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(roomf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(roomf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(roomf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(roomf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new roomf().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> access;
    private javax.swing.JTextField availableRooms;
    private javax.swing.JButton cnclrmbkng;
    private javax.swing.JComboBox<String> famly;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JComboBox<String> luxry;
    private javax.swing.JList<String> rmain;
    private javax.swing.JTextField roomNofChld;
    private javax.swing.JTextField roomNofNights;
    private javax.swing.JTextField roomNofadlt;
    private javax.swing.JTextField roomNofvch;
    private javax.swing.JButton roombacktohome;
    private javax.swing.JTextField roomchin;
    private javax.swing.JTextField roomchout;
    private javax.swing.JButton roomconfbook;
    private javax.swing.JCheckBox roomprkng;
    private javax.swing.JTextField roomrate;
    private javax.swing.JButton roomtoorder;
    private javax.swing.JTextField selectedRoom;
    private javax.swing.JComboBox<String> sprof;
    private javax.swing.JComboBox<String> standardroom;
    private javax.swing.JComboBox<String> villa;
    // End of variables declaration                   
}
